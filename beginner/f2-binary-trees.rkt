#lang racket

(require "f1-stack-queue-lists.rkt")

(define-struct node (value [left #:mutable] [right #:mutable]))
(define-struct binary-tree ([root #:mutable]))

(define (binary-tree-add BT val)
  (define (_insert-right ptrNode newNode)
    (define ptrRight (node-right ptrNode))
    (if (null? ptrRight)
        (set-node-right! ptrNode newNode)
        (_binary-tree-add ptrRight newNode)))
  (define (_insert-left ptrNode newNode)
    (define ptrLeft (node-left ptrNode))
    (if (null? ptrLeft)
        (set-node-left! ptrNode newNode)
        (_binary-tree-add ptrLeft newNode)))
  (define (_binary-tree-add ptrNode newNode)
    (define ptrValue (node-value ptrNode))
    (define newValue (node-value newNode))
    (if (< newValue ptrValue)
        (_insert-left ptrNode newNode)
        (_insert-right ptrNode newNode)))
  (define newNode (make-node val '() '()))
  (define root (binary-tree-root BT))
  (if (null? root)
      (set-binary-tree-root! BT newNode)
      (_binary-tree-add root newNode)))


(define tree1 (make-binary-tree '()))

(define (dfs BT)
  (define (_dfs node ll)
    (unless (null? (node-left node))
      (_dfs (node-left node) ll))
    (linked-list-append ll (node-value node))
    (unless (null? (node-right node))
      (_dfs (node-right node) ll)))
  (define currentNode (binary-tree-root BT))
  (define ll (make-linked-list '()))
  (if (null? currentNode)
      ll
      (begin  (_dfs currentNode ll)
              ll)))

(binary-tree-add tree1 50)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 25)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 75)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 35)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 15)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 85)
(displayln (linked-list->list (dfs tree1)))
(binary-tree-add tree1 65)
(displayln (linked-list->list (dfs tree1)))